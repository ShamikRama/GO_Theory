// Строки в Go — это неизменяемые последовательности байтов.
// Они могут быть инициализированы двумя способами:
// с помощью var и с помощью литерала.

var s string         // Память под строку выделяется. Строка инициализируется нулевым значением "" (пустая строка).
s := "Hello, World!" //  Память под строку выделяется. Строка инициализируется с указанным значением.


// Строки используют кодировку под названием UTF-8, где каждому символу требуется от 1 до 4 байтов;
// byte является другим названием типа uint8, a rune является другим названием типа int32;
// лючевое слово range может декодировать закодированную строку UTF-8 в руны.

// 1. Неизменяемость

// Строки неизменяемы, что означает, что их содержимое не может быть изменено после создания. Это важное свойство обеспечивает несколько преимуществ, включая безопасность при передаче строк между функциями и горутинами без необходимости блокировок или других форм синхронизации.

// 2. Структура строки

// Внутренне строка представлена структурой, которая содержит два поля:

// Указатель на массив байтов: Это указатель на первый элемент массива байт, который фактически хранит символы строки в кодировке UTF-8.
// Длина: Количество байт в строке, а не количество рун или символов. Это важное различие, поскольку в UTF-8 один символ может занимать от 1 до 4 байт.
// 3. UTF-8 как стандартная кодировка

// Go использует UTF-8 как стандартную кодировку для строк. Это позволяет эффективно работать с международным текстом, поддерживая широкий спектр символов без сложностей, связанных с другими кодировками. Однако это также означает, что операции, такие как получение длины строки в рунах (символах) или доступ к отдельному символу, могут потребовать дополнительных вычислений для обработки многобайтовых символов.

// 4. Срезы строк

// Поскольку строки неизменяемы, любая операция, которая кажется "изменяющей" строку, на самом деле создает новую строку. Операции среза строк в Go особенно эффективны, потому что новые строки создаются путем указания на тот же массив байтов, что и исходная строка, с изменением только начальной позиции и длины. Это делает срезы строк очень быстрыми и экономичными с точки зрения использования памяти.

// 5. Производительность и память

// Благодаря неизменяемости и способу хранения строк в виде срезов байтов, Go обеспечивает эффективное управление памятью и производительность при работе со строками. Однако необходимо быть осторожным с операциями, которые могут казаться невинными, но приводят к частому созданию новых строк, так как это может повлечь за собой издержки на выделение памяти и сборку мусора.

// Вот простой пример демонстрирующий работу со строками:

s := "Hello, world"      // Создание строки
t := s[7:]               // Срез строки, создает новую строку "world"

fmt.Println(s)           // Выводит: Hello, world
fmt.Println(t)           // Выводит: world
```