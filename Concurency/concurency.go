// ЧТО ТАКОЕ ПОТОК И ПРОЦЕСС И В ЧЕМ РАЗЛИЧИЯ ?

// Процесс разделяется на потоки, которые работают в одном процессе
// У разных процессов разная память, но потоки в одном и том же процессе
// используют одну и ту же память внутри процесса, потоки могут быть парралельны

// Многопоточность - в программе существуют множество потоков
// Состояния потокоа:
// 1) выполнение
// 2) ожидание
// 3) готовности
// 4) переходное
// 5) завершения

// КТО И КАК УПРАВЛЯЕТ ГОРУТИНЫ И В RUNTIME GOLANG ?
// СБОРЩИК МУСОРА ?
// ПРОКСИРОВАНИЕ КЭШЕРОВАНИЕ ?
// ПОИСК СОРТИРОВКА СЛИЯНИЕ  (АЛГОРИТМЫ)?
// КАК УСТРОЕНЫ СЕТИ
// КАК ПРОЦЕССОР ВЫПОЛНЯЕТ ПРОГРАММНЫЙ КОД КАК ОН ВЗАИМОДЕЙСТВУЕТ С ПАМЯТЬЮ И КАК УСТРОЕНА ИЕРАРХИЯ ПАМЯТИ
// ОДНОСВЯЗНЫЙ СПИСОК НАПИСАТЬ НАПИСАТЬ ЕГО ОБРАЩЕНИЕ И ТЕСТЫ

// В чем различия между системным потоком(тредом) и горутиной?
// Потоки ситсемные - абстракция операционной системы, а горутины абстракция
// рантайма гошного. Чтобы переключиться между тредами, надо залезть в ядро(это дорого)
// Но чтобы переключиться между горутинами, надо всего лишь переключить их в треде
// Горутины выполняются в одном треде(потоке) когда используют общую область памяти

// Горутина в треде.
// GMP -

// Распределение задач (например, горутин в Go или потоков в других языках) между потоками выполнения (тредами) управляется планировщиком (scheduler). Планировщик отвечает за эффективное распределение задач между доступными потоками, чтобы максимизировать производительность и использование ресурсов.

// Основные принципы распределения задач:
// Балансировка нагрузки:

// Планировщик старается равномерно распределить задачи между доступными потоками, чтобы избежать перегрузки одного потока и простаивания других.

// Связность задач:

// Если задачи взаимосвязаны (например, используют общие данные), планировщик может попытаться назначить их на один и тот же поток, чтобы избежать проблем с синхронизацией и состоянием гонки.

// Доступность потоков:

// Планировщик учитывает текущую загрузку потоков. Если все потоки заняты, новые задачи могут быть поставлены в очередь до тех пор, пока не освободится хотя бы один поток.

// Ограничения ресурсов:

// Планировщик учитывает ограничения ресурсов, такие как количество ядер процессора и доступная память, чтобы избежать перегрузки системы.

// Глобальная очередь: Хотя глобальная очередь используется для хранения горутин, которые еще не были назначены на потоки, планировщик Go также пытается минимизировать обращения к глобальной очереди, чтобы избежать накладных расходов на синхронизацию.

// Локальные очереди: Каждый поток имеет свою локальную очередь горутин, которая используется для хранения горутин, назначенных именно этому потоку. Локальные очереди более эффективны, так как не требуют синхронизации между потоками.

